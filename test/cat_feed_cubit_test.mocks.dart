// Mocks generated by Mockito 5.4.6 from annotations
// in catinder/test/cat_feed_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:catinder/domain/entities/cat.dart' as _i3;
import 'package:catinder/domain/entities/liked_cat.dart' as _i9;
import 'package:catinder/domain/repositories/cat_repository.dart' as _i2;
import 'package:catinder/domain/usecases/dislike_cat.dart' as _i7;
import 'package:catinder/domain/usecases/get_random_cat.dart' as _i4;
import 'package:catinder/domain/usecases/like_cat.dart' as _i6;
import 'package:catinder/domain/usecases/watch_liked_cats.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCatRepository_0 extends _i1.SmartFake implements _i2.CatRepository {
  _FakeCatRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCat_1 extends _i1.SmartFake implements _i3.Cat {
  _FakeCat_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetRandomCat].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRandomCat extends _i1.Mock implements _i4.GetRandomCat {
  MockGetRandomCat() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CatRepository get repo => (super.noSuchMethod(
        Invocation.getter(#repo),
        returnValue: _FakeCatRepository_0(
          this,
          Invocation.getter(#repo),
        ),
      ) as _i2.CatRepository);

  @override
  _i5.Future<_i3.Cat> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i5.Future<_i3.Cat>.value(_FakeCat_1(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Cat>);
}

/// A class which mocks [LikeCat].
///
/// See the documentation for Mockito's code generation for more information.
class MockLikeCat extends _i1.Mock implements _i6.LikeCat {
  MockLikeCat() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CatRepository get repo => (super.noSuchMethod(
        Invocation.getter(#repo),
        returnValue: _FakeCatRepository_0(
          this,
          Invocation.getter(#repo),
        ),
      ) as _i2.CatRepository);

  @override
  _i5.Future<void> call(_i3.Cat? cat) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [cat],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [DislikeCat].
///
/// See the documentation for Mockito's code generation for more information.
class MockDislikeCat extends _i1.Mock implements _i7.DislikeCat {
  MockDislikeCat() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CatRepository get repo => (super.noSuchMethod(
        Invocation.getter(#repo),
        returnValue: _FakeCatRepository_0(
          this,
          Invocation.getter(#repo),
        ),
      ) as _i2.CatRepository);

  @override
  _i5.Future<void> call(_i3.Cat? cat) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [cat],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [WatchLikedCats].
///
/// See the documentation for Mockito's code generation for more information.
class MockWatchLikedCats extends _i1.Mock implements _i8.WatchLikedCats {
  MockWatchLikedCats() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CatRepository get repo => (super.noSuchMethod(
        Invocation.getter(#repo),
        returnValue: _FakeCatRepository_0(
          this,
          Invocation.getter(#repo),
        ),
      ) as _i2.CatRepository);

  @override
  _i5.Stream<List<_i9.LikedCat>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i5.Stream<List<_i9.LikedCat>>.empty(),
      ) as _i5.Stream<List<_i9.LikedCat>>);
}
